#!/usr/bin/python3
import os, sys
from pathlib import Path
from argparse import ArgumentParser, _SubParsersAction
from typing import List
from termcolor import colored

def run_subparser( parser: _SubParsersAction ) -> ArgumentParser:
    """
    The run subparser generates the parser for running the sim. Requires one
    positional argument that states the scenario to be run. Only adds scenarios
    that are properly configured!
    """

    scenariosPath = Path( "./sim/scenarios" )
    scenarioStrings: List[ str ] = []
    for scenario in scenariosPath.glob( "*" ):
        scenarioStrings.append( scenario.name )

    run: ArgumentParser = parser.add_parser( "run", help="Execute the given simulation scenario" )
    run.add_argument( 
        "scenario",
        help="Choose a scenario to run from this list",
        choices=scenarioStrings
    )
    pass

def parse_arguments( args=sys.argv[ 1: ] ) -> ArgumentParser:
    parser = ArgumentParser( 
        "sim", 
        description=(
            "Sim is the de-facto way to execute a model-based simulation (sim). "
            "In addition, this tool can also help you make models, create scenarios, "
            "build the sim, and run it!"
        ) 
    )

    subparsers = parser.add_subparsers( dest="subcommand" )
    run_subparser( subparsers )
    subparsers.add_parser( "build", help="Builds or rebuilds the simulation" )
    subparsers.add_parser( "test", help="Runs python unit tests" )

    return parser.parse_known_args( args )
    # return parser.parse_args( args )

def main():
    # Change into the main directory
    starting_dir = Path.cwd()
    os.chdir( Path( __file__ ).parent.parent.parent )

    # Parse the arguments
    args, unknown = parse_arguments()

    # Perform the action
    if args.subcommand == "run":
        simargs = ""
        for un in unknown:
            if ' ' in un:
                simargs = simargs + ' "' + un + '"'
            else:
                simargs = simargs + " " + un
        os.system( f"{Path( './output/debug/sim' )} {Path( __file__ ).parent.parent / 'scenarios' / args.scenario}" + simargs )
    elif args.subcommand == "build":
        os.system( "cargo build" )
    elif args.subcommand == "test":
        # Change back to current dir
        os.chdir( starting_dir )
        print( colored( "Starting Tests:", "white", attrs=['bold'] ) )
        os.system( "python -m unittest discover -p '*.py'" )

if __name__ == "__main__":
    main()